/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.ui;

import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;

import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.WindowConstants;

import com.pagePro.PageProGoogle;
import com.spiderDemo.ConsolePipeline;
import com.spiderDemo.SpiderMain;

import us.codecraft.webmagic.Spider;


/**
 *
 * @author buildhappy
 */
public class SpiderUI extends JFrame {
	
	private Thread taskThread;
	private Spider mySpider;

    /**
     * Creates new form BasicCrawlerUI
     */
    //BasicCrawler crawler = new BasicCrawler();
    //int threads=10;
    public SpiderUI() {
        initComponents();
        File f=new File("download");
        txt_path.setText(f.getAbsolutePath());
        
        txt_threads.setText(threads+"");
        String help="至少添加一个种子（种子即爬虫的起始页面的网址，如果要爬去整个站点，可以用站点主页的网址作为种子)\n"
                +"现在已经实现的爬虫网站有：\n"
                +"百度：http://as.baidu.com  "
                +"豌豆荚：http://www.wandoujia.com/apps  ";
        
       output(help);
        //crawler.addRegex("http://.*xinhuanet.com/.*");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
   // @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txt_seed = new JTextField();
        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        btn_addseed = new JButton();
        txt_pregex = new JTextField();
        btn_addpregex = new JButton();
        jScrollPane2 = new JScrollPane();
        txt_output = new JTextArea();
        jLabel3 = new JLabel();
        txt_path = new JTextField();
        btn_start = new JButton();
        btn_stop = new JButton();
        jLabel4 = new JLabel();
        txt_threads = new JTextField();
        jLabel5 = new JLabel();
        txt_nregex = new JTextField();
        btn_addnregex = new JButton();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("基础爬虫");

        jLabel1.setText("种子:");

        jLabel2.setText("允许的正则(可选):");

        btn_addseed.setText("添加");
        //调用btn_addseedActionPerformed，向"添加种子"按钮添加事件
        btn_addseed.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btn_addseedActionPerformed(evt);
            }
        });

        btn_addpregex.setText("添加");
        btn_addpregex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addpregexActionPerformed(evt);
            }
        });

        txt_output.setColumns(20);
        txt_output.setRows(5);
        jScrollPane2.setViewportView(txt_output);

        jLabel3.setText("本地路径:");

        txt_path.setText("download");
        txt_path.setToolTipText("");

        btn_start.setText("开始");
        btn_start.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btn_startActionPerformed(evt);
            }
        });

        btn_stop.setText("停止");
        btn_stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_stopActionPerformed(evt);
            }
        });

        jLabel4.setText("线程数:");

        jLabel5.setText("禁止的正则(可选)：");
        jLabel5.setToolTipText("");//注册要在工具提示中显示的文本。光标处于该组件上时显示该文本。 

        btn_addnregex.setText("添加");
        btn_addnregex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addnregexActionPerformed(evt);
            }
        });
        //添加关闭窗口时间
        this.addWindowListener(new WindowAdapter(){
        	public void windowClosing(WindowEvent e){
        		System.exit(0);
        	}
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_start)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_stop))
                    .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 676, GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_nregex, GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txt_threads, GroupLayout.Alignment.LEADING)
                                .addComponent(txt_pregex, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
                                .addComponent(txt_seed, GroupLayout.Alignment.LEADING)
                                .addComponent(txt_path, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(35, 35, 35)
                                    .addComponent(btn_addseed))
                                .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btn_addpregex)))
                            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(btn_addnregex)))))
                .addContainerGap(101, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_seed, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_addseed)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txt_pregex, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_addpregex))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_nregex, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_addnregex)
                    .addComponent(jLabel5))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txt_path, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txt_threads, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_start)
                    .addComponent(btn_stop))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 235, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel2.getAccessibleContext().setAccessibleName("允许的正则(可选)：");
        jLabel5.getAccessibleContext().setAccessibleName("禁止的正则（可选）:");

        pack();
        
        mySpider = Spider.create(new PageProGoogle())
				.addPipeline(new ConsolePipeline());
    }// </editor-fold>//GEN-END:initComponents

    private void btn_addseedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addseedActionPerformed
        // TODO add your handling code here:
        String seed=txt_seed.getText();
        //crawler.addSeed(seed);
        url = seed;
        output("添加种子:"+seed);
    }//GEN-LAST:event_btn_addseedActionPerformed

    private void btn_startActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btn_startActionPerformed
       
    	btn_start.setEnabled(false);
    	
//        if(!crawler.couldStart()){
//            output("请添加至少一个种子URL!");
//            return;
//        }
        String localPath=txt_path.getText().trim();
        String seed=txt_seed.getText();
        //crawler.setRoot(localpath);
        try{
        	threads=Integer.valueOf(txt_threads.getText()).intValue();
        }catch(Exception e){
            
        }
        System.out.println("localPath:" + localPath);
        SpiderMain.start(seed);
        System.out.println("seed:" + seed);
        
        //开始爬虫
//        taskThread = new Thread(new Runnable(){
//			public void run() {
//				mySpider.addUrl(url).thread(threads).run();//http://as.baidu.com
//			}
//        });
//        
//        taskThread.start();
		
		System.out.println("main threading is running....");
		
        output("开始爬取，请前往"+localPath+"文件夹查看爬取文件,不要关闭此窗口！");
    }//GEN-LAST:event_btn_startActionPerformed

    private void btn_addpregexActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btn_addpregexActionPerformed
        // TODO add your handling code here:
        String regex=txt_pregex.getText();
       // crawler.addRegex("+"+regex);
        output("添加正例正则:"+regex);
    }//GEN-LAST:event_btn_addpregexActionPerformed

    
    private void output(String line){
        txt_output.append(line+"\n");
    }
    
    private void btn_stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_stopActionPerformed
        // TODO add your handling code here:
        //crawler.stop();
        output("停止");
        mySpider.close();
//        btn_start.setEnabled(true);
//        while(taskThread.isInterrupted()){
//        	taskThread.interrupt();
//        }
    }//GEN-LAST:event_btn_stopActionPerformed

    private void btn_addnregexActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btn_addnregexActionPerformed
        // TODO add your handling code here:
        String regex=txt_pregex.getText();
        //crawler.addRegex("-"+regex);
        output("添加反例正则:"+regex);
    }//GEN-LAST:event_btn_addnregexActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
        	//UIManager 管理当前外观、可用外观集合、外观更改时被通知的 PropertyChangeListeners、外观默认值以及获取各种默认值的便捷方法
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SpiderUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SpiderUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SpiderUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SpiderUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        //EventQueue 是一个与平台无关的类，它将来自于底层同位体类和受信任的应用程序类的事件列入队列
//        EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new SpiderUI().setVisible(true);
//            }
//        });
        UIThread p =new UIThread();
        Thread thread = new Thread(p);
       // thread.setDaemon(true);
        thread.setPriority(Thread.MAX_PRIORITY);
        thread.start();
        

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton btn_addnregex;
    private JButton btn_addpregex;
    private JButton btn_addseed;
    private JButton btn_start;
    private JButton btn_stop;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JLabel jLabel5;
    private JScrollPane jScrollPane2;
    private JTextField txt_nregex;
    private JTextArea txt_output;//信息提示框
    private JTextField txt_path;
    private JTextField txt_pregex;
    private JTextField txt_seed;
    private JTextField txt_threads;
    
    private static String url;
    private static int threads = 5;
    // End of variables declaration//GEN-END:variables
    
    public static class UIThread implements Runnable{

		public void run() {
			SpiderUI spiderUI = new SpiderUI();
			//spiderUI.
			spiderUI.setVisible(true);
		}
    	
    }
}

